# 【〇〇プロジェクト】要件定義書

## 📋 このテンプレートの使い方
このドキュメントは「**開発チーム全体**」での協働を前提とした要件定義書です。
- **企業・チーム開発**: 全セクションを活用し、ステークホルダー間の認識統一に使用
- **個人・AI協働開発**: 🎯マークの項目を優先的に埋めて段階的に詳細化

### 🏃‍♂️ 段階的な進め方（個人・AI協働開発向け）
- **フェーズ1（最優先）**: 🎯マークの1〜3章を埋めてAIと方向性を合わせる
- **フェーズ2（開発前）**: 🎯マークの4〜5章でスコープと優先度を決める  
- **フェーズ3（開発中）**: 🎯マークの6章以降を必要に応じて段階的に詳細化

## 0. はじめに

このドキュメントは「**【〇〇プロジェクト】**」の開発における要件を定義するものです。

対象読者は、プロジェクトに関わる全てのステークホルダー（開発者、デザイナー、AIエンジニア、AIアシスタント等）です。この要件定義書に基づき、設計、開発、テストを進めます。また、本ドキュメントは開発の進捗に合わせて更新される「生きたドキュメント」として扱います。

### 0.1. ドキュメント管理

- **作成者：** **【氏名】**
- **最終更新：** **【日付】**
- **承認者：** **【氏名・役職】**
- **承認日：** **【日付】**
- **次回レビュー予定：** **【日付】**
- **バージョン：** **【1.0】**

### 0.2. AI活用方針

- **AI活用レベル：** **【コード生成/レビュー/相談のみ等】**
- **AI依存度：** **【どこまでAIに任せるか】**
- **品質保証：** **【AI生成コードの検証方法】**
- **AI利用ガイドライン：** **【チーム内でのAI利用ルール】**
- **知的財産権対応：** **【AI生成コードの権利関係確認方法】**

---

## 🎯 フェーズ1：AIに伝える核心情報（最優先で埋める）

## 1. 業務要件

### 🎯 1.1. 開発の背景と目的

#### 1.1.1. なぜこれを作るのか？（開発のきっかけ）
**【具体的なきっかけ・動機を記述】**
- **【ここに具体的なきっかけを記述してください】**

#### 1.1.2. 現在困っていること（現状の業務課題 As-Is）
**【現状の課題を具体的に】**
- **【ここに現状の課題を箇条書きで記述してください】**

#### 1.1.3. このシステムで実現したいこと（開発目的 Purpose）
**【最終的に達成したい状態】**
- **【ここに開発の目的を箇条書きで記述してください】**

#### 1.1.4. サービスの目標 (KPI)
- **【ここに具体的なKPIを記述してください】**

### 🎯 1.2. 誰のために作るのか？（ターゲットユーザー）

#### 1.2.1. メインユーザー
**ユーザー像：【ユーザーの基本情報】**
- **属性**: 【年齢、職業、技術レベル等】
- **利用環境**: 【スマホ/PC、時間帯、場所等】
- **現在の課題**: 【このユーザーが困っていること】
- **期待する価値**: 【システムから得たい価値】

#### 1.2.2. 利用シーン
**【いつ、どこで、どのように使われるか】**
- **【具体的な利用シーンを記述】**

### 1.3. 業務フロー

- **As-Is フロー (現状の手順):**
  - **【ここに現状の業務フローを記述】**

- **To-Be フロー (理想の手順):**
  - **【ここに新システム導入後の業務フローを記述】**

### 🎯 1.4. 技術環境・制約

#### 1.4.1. 使用技術
- **フロントエンド**: 【React/Vue/バニラJS等】
- **バックエンド**: 【Node.js/Python/PHP等】
- **データベース**: 【MySQL/PostgreSQL/Firebase等】
- **インフラ**: 【AWS/Vercel/個人サーバー等】

#### 1.4.2. 環境設定管理
- **開発環境**: 【ローカル環境、Docker、VSCode設定等】
- **テスト環境**: 【ステージング環境、CI/CDパイプライン設定】
- **本番環境**: 【プロダクション環境、デプロイ先、CDN設定等】
- **環境変数管理**: 【.env、AWS Secrets Manager、機密情報の管理方法】
- **設定差分管理**: 【環境ごとの設定値、デプロイ時の設定切り替え】

#### 1.4.3. 制約事項
- **予算制約**: 【月額○○円まで等】
- **技術制約**: 【使えない技術、既存システムとの制約等】
- **スケジュール制約**: 【いつまでに完成させたいか】

### 1.5. ステークホルダー

| 役割 | 担当者/部署 | 責任範囲 |
| :----------- | :------------ | :-------------- |
| プロダクトオーナー | **【（氏名/部署）】** | **【（責任範囲を記述）】** |
| **（その他の役割）** | **【（氏名/部署）】** | **【（責任範囲を記述）】** |

### 1.6. コンプライアンス要件

- **適用法令：** **【GDPR、個人情報保護法、電子契約法等】**
- **業界規制：** **【金融商品取引法、医療法等の業界固有規制】**
- **監査要件：** **【内部統制、外部監査対応、SOX法対応等】**
- **データ保護：** **【個人情報の取扱い方針、データ保存期間等】**
- **セキュリティ基準：** **【ISO27001、SOC2等の準拠基準】**

---

## 🎯 フェーズ2：開発の方向性を決める（AIと相談しながら埋める）

## 2. 機能要件

### 🎯 2.1. 何を作るのか？（機能一覧と優先順位）

- **優先度の定義 (MoSCoWモデル):**
  - **Must (高):** この機能がないとリリースできない、必須の要件。
  - **Should (中):** 必須ではないが、提供すべき重要な機能。
  - **Could (低):** あれば尚良いが、影響が少ない機能。
  - **Won't (対象外):** 今回の開発では実施しない機能。

| 機能ID | 機能名 | 優先度 | 概要 | AIへの相談ポイント |
| :--- | :--- | :--- | :--- | :--- |
| **F1** | **【大機能の名称】** | | | |
| **F1-1** | **【サブ機能の名称】** | **【Must/Should/Could】** | **【どんな機能か】** | **【AIに相談したいこと】** |
| **...** | **...** | **...** | **...** | **...** |

### 🎯 2.2. ユーザーストーリー
**「○○として、○○のために、○○したい」形式で記述**

1. **【ユーザー】として、【目的】のために、【機能】を使いたい**
   - 受け入れ基準：【完了の定義】

2. **【追加のユーザーストーリー】**

### 🎯 2.3. 成功の定義

#### 2.3.1. 定量的な目標（KPI）
- **【計測可能な指標1】**: 【目標値】
- **【計測可能な指標2】**: 【目標値】

#### 2.3.2. 定性的な目標
- **【ユーザー体験の向上等】**
- **【その他の定性的な成功指標】**

---

## 🎯 フェーズ3：実装詳細（開発時に段階的に詳細化）

### 🎯 2.4. 機能の詳細仕様
**※必要な機能から順番に、AIと相談しながら埋めていく**

*(注: 以下のテンプレートをコピーして、機能ごとに作成してください)*

| 項目 | 内容 |
| :--- | :--- |
| **機能ID** | **【（例: F1-1）】** |
| **機能名** | **【（例: 新規登録）】** |
| **概要** | **【（この機能が何をするものかを簡潔に記述）】** |
| **入力** | - **【（ユーザーが入力する情報やデータ。箇条書きで記述）】** |
| **処理内容** | 1. **【（システムが内部で行う処理。箇条書きや番号付きリストで記述）】** |
| **出力** | - **【（処理の結果として画面に表示されるものや生成されるデータ）】** |
| **関連機能** | **【この機能と連携する他の機能ID】** |
| **技術的制約** | **【この機能特有の技術制約があれば記述】** |
| **パフォーマンス要件** | **【この機能に求められる性能要件】** |
| **UI/UX** | - **【（関連する画面デザインのURLや補足事項を記述）】** |
| **受け入れ基準** | **シナリオ1：【（テストするシナリオ名）】**<br>- **Given** 【（前提条件）】<br>- **When** 【（ユーザーの操作）】<br>- **Then** 【（期待される結果）】<br><br>**シナリオ2：【（別のシナリオ名）】**<br>- **Given** ... |
| **例外処理** | - **【（エラーが発生した際の挙動について記述）】** |
| **備考** | - **【（その他の補足事項があれば記述）】** |

**🤖 AIへの相談事項**
- [ ] この仕様で抜け漏れはないか？
- [ ] セキュリティ上の懸念はないか？
- [ ] ユーザビリティの改善点はあるか？

### 2.5. UI (ユーザーインターフェース)

- **デザインシステム/ガイドライン:** `【（FigmaやAdobe XDなどの共有URL）】`
- **レスポンシブ対応:** **【（対応方針を記述）】**
- **ユーザビリティテスト計画:** **【（実施予定、対象ユーザー、テスト項目など）】**
- **デザインレビュープロセス:** **【（レビューのタイミング、参加者、承認フローなど）】**

#### 2.5.1. アクセシビリティ詳細
- **WCAG準拠レベル：** **【AA/AAA等】**
- **対応技術：** **【スクリーンリーダー、音声操作、キーボード操作等】**
- **テスト方法：** **【axe、WAVE等の自動チェック、ユーザーテスト】**
- **対象ユーザー：** **【視覚障害、聴覚障害、運動機能障害等】**
- **多言語対応：** **【国際化対応の有無、対象言語】**

### 🎯 2.6. データ設計

#### 2.6.1. 必要なデータ
**【データの種類】**
- **保存するデータ**: 【ユーザー情報、コンテンツ等】
- **外部から取得するデータ**: 【API、CSV等】

#### 2.6.2. データ構造 (ER図・テーブル定義)

- **ER図:**
  - `![ER図](【画像ファイルへのパス】)`

- **テーブル定義（AIと相談して決める）:**

*（テーブルごとに以下の表を作成）*

**【テーブル名】**

| カラム名 | データ型 | 主キー | NOT NULL | 説明 |
| :--- | :--- | :--- | :--- | :--- |
| `【id】` | `【UUID】` | ✅ | ✅ | **【ID】** |
| `...` | `...` | | | `...` |

### 🎯 2.7. 外部連携
#### 2.7.1. 使用予定のAPI・サービス
| サービス名 | 用途 | 料金体系 | 代替案 |
| :--- | :--- | :--- | :--- |
| **【サービス名】** | **【何に使うか】** | **【無料/従量課金等】** | **【使えない場合の代替】** |
|  |  |  |  |

### 2.8. 成果物・納品物

| 成果物 | 形式 | 納品先 | 納品時期 | 備考 |
| :--- | :--- | :--- | :--- | :--- |
| **【システム本体】** | **【形式】** | **【納品先】** | **【時期】** | **【補足事項】** |
| **【設計書】** | **【PDF/Figma等】** | **【納品先】** | **【時期】** | **【補足事項】** |
| **【テスト仕様書】** | **【Excel/PDF等】** | **【納品先】** | **【時期】** | **【補足事項】** |
| **【運用マニュアル】** | **【PDF/Web等】** | **【納品先】** | **【時期】** | **【補足事項】** |

### 2.9. DevOps要件

#### 2.9.1. CI/CD
- **継続的インテグレーション：** **【GitHub Actions/Jenkins等の使用予定】**
- **自動テスト：** **【単体テスト、結合テスト、E2Eテストの自動化範囲】**
- **自動デプロイ：** **【本番/ステージング環境への自動デプロイ設定】**
- **デプロイ戦略：** **【Blue-Green、Rolling、Canary等】**

#### 2.9.2. インフラストラクチャ
- **IaC（Infrastructure as Code）：** **【Terraform、CloudFormation等の使用有無】**
- **コンテナ化：** **【Docker、Kubernetes等の使用予定】**
- **環境管理：** **【開発/テスト/本番環境の構成管理】**

#### 2.9.3. 監視・運用
- **監視ツール：** **【CloudWatch、Datadog、New Relic等】**
- **ログ管理：** **【ELK Stack、CloudWatch Logs等】**
- **アラート設定：** **【障害通知、パフォーマンス監視のしきい値】**
- **バックアップ戦略：** **【データバックアップの頻度、保存期間、復旧手順】**

### 2.10. テスト戦略

#### 2.10.1. テスト種別と範囲
- **単体テスト**: 【カバレッジ80%以上、実行ツール：Jest/JUnit等】
- **結合テスト**: 【API連携、データベース接続等の結合部分】
- **システムテスト**: 【全体的な機能テスト、性能テスト】
- **受入テスト**: 【ユーザー観点での動作確認、UAT実施方法】

#### 2.10.2. 自動化戦略
- **自動化範囲**: 【回帰テスト、API テスト、UI テストの自動化対象】
- **手動テスト範囲**: 【ユーザビリティ、探索的テスト等】
- **テストデータ管理**: 【準備方法、個人情報・機密データの扱い】
- **品質ゲート**: 【テストカバレッジ、バグ修正率等のリリース判定基準】

### 2.11. 運用移行計画

#### 2.11.1. 移行戦略
- **移行方式**: 【段階的移行、一括移行、並行稼働等】
- **移行スケジュール**: 【移行作業の詳細日程、ロールバック計画】
- **データ移行**: 【既存データの移行方法、データ整合性確認】
- **システム切り替え**: 【DNS切り替え、トラフィック移行等】

#### 2.11.2. ユーザーサポート
- **ユーザー教育**: 【操作マニュアル作成、研修計画、説明会実施】
- **サポート体制**: 【問い合わせ窓口、FAQ整備、ヘルプデスク体制】
- **障害時対応**: 【エスカレーション手順、緊急連絡体制】
- **フィードバック収集**: 【ユーザーからの意見収集、改善計画】

---

## 🎯 必要に応じて詳細化する項目

## 3. 非機能要件（重要度高いもののみ）

### 3.1. 性能要件（具体的指標）
- **レスポンス時間**: 【画面表示：2秒以内、API：500ms以内等】
- **同時接続数**: 【想定ユーザー数：100、ピーク時負荷：500等】
- **スループット**: 【1秒あたり処理件数：1000リクエスト等】
- **リソース使用量**: 【CPU：80%以下、メモリ：4GB以下、ストレージ：100GB等】
- **測定方法**: 【JMeter、LoadRunner等の負荷テストツール】

| 項目 | 要件 | 測定方法/基準 | AIとの相談ポイント |
| :--- | :--- | :--- | :--- |
| **3.2. 可用性** | **【稼働率99.9%、ダウンタイム月8.8時間以内等】** | **【監視ツールでの稼働率測定】** | **現実的な目標設定** |
| **3.3. セキュリティ** | **【認証方式、暗号化、脆弱性対策等】** | **【ペネトレーションテスト、脆弱性診断】** | **脆弱性チェック、対策案** |
| **3.4. 保守性** | **【コード品質、ドキュメント整備等】** | **【技術的負債の測定、保守工数】** | **保守性向上のアドバイス** |
| **3.5. 拡張性** | **【将来の機能追加、負荷増加への対応】** | **【アーキテクチャレビュー、負荷テスト】** | **将来の拡張性考慮** |
| **3.6. 移行性** | **【データ移行、システム移行の要件】** | **【移行テスト、ロールバック手順】** | **移行戦略のアドバイス** |
| **3.7. 運用性** | **【監視、ログ、アラート等の運用要件】** | **【運用工数、自動化率】** | **運用負荷軽減案** |
| **3.8. 技術制約** | **【既存システムとの連携制約、利用必須ライブラリ等】** | **【制約の確認方法】** | **制約回避策** |
| **3.9. 技術環境** | **【OS、言語、FW、インフラ等を具体的に記述】** | - | **技術選定のアドバイス** |
| **3.10. コスト** | **【開発予算、運用コスト等を記述】** | **【管理方法を記述】** | **コスト最適化案** |
| **3.11. スケジュール** | **【主要なマイルストーンと日付を記述】** | **【管理方法を記述】** | **現実的なスケジュール** |

### 3.12. 事業継続性（BCP）
- **データバックアップ**: 【日次自動バックアップ、保存先：AWS S3、復旧手順書あり】
- **システム復旧**: 【RTO（目標復旧時間）：4時間、RPO（目標復旧時点）：1時間】
- **代替手段**: 【システム停止時の手動業務フロー、緊急連絡体制】
- **災害対応**: 【地震、火災等での事業継続計画】

## 4. リスク管理と対策

| リスク項目 | 影響度 | 発生確率 | 対策 | 担当者 | 検知方法 |
| :--- | :--- | :--- | :--- | :--- | :--- |
| **【技術的リスク】** | **【高/中/低】** | **【高/中/低】** | **【対策内容】** | **【担当者】** | **【検知方法】** |
| **【スケジュールリスク】** | **【高/中/低】** | **【高/中/低】** | **【対策内容】** | **【担当者】** | **【検知方法】** |
| **【品質リスク】** | **【高/中/低】** | **【高/中/低】** | **【対策内容】** | **【担当者】** | **【検知方法】** |
| **【リソースリスク】** | **【高/中/低】** | **【高/中/低】** | **【対策内容】** | **【担当者】** | **【検知方法】** |

---

## 🤖 AIとの協働メモ（個人開発向け）

### AIに相談したいこと
- [ ] 【相談事項1】
- [ ] 【相談事項2】

### AIからの提案・アドバイス
**【日付】の相談結果**
- **提案内容**: 【AIからの提案内容】
- **採用/不採用**: 【採用or不採用】
- **理由**: 【判断理由】

### 次回AIと話したいトピック
- [ ] 【トピック1】
- [ ] 【トピック2】

---

## 5. 用語集

### 5.1. 技術用語
| 用語 | 定義 | 備考 |
| :--- | :--- | :--- |
| **【フレームワーク名】** | **【定義・説明】** | **【バージョン、使用箇所等】** |
| **【アーキテクチャパターン】** | **【定義・説明】** | **【採用理由、メリット等】** |
| **【開発手法・ツール】** | **【定義・説明】** | **【使用方法、設定等】** |

### 5.2. ビジネス用語
| 用語 | 定義 | 備考 |
| :--- | :--- | :--- |
| **【業界特有用語1】** | **【定義・説明】** | **【関連する法規制等】** |
| **【業界特有用語2】** | **【定義・説明】** | **【業界標準との関係】** |
| **【社内用語】** | **【定義・説明】** | **【使用部署、関連システム】** |

### 5.3. AI・機械学習用語（AI協働開発時）
| 用語 | 定義 | 備考 |
| :--- | :--- | :--- |
| **【AI・ML用語1】** | **【定義・説明】** | **【使用するモデル、API等】** |
| **【AI・ML用語2】** | **【定義・説明】** | **【精度要件、学習データ等】** |
| **【プロンプトエンジニアリング用語】** | **【定義・説明】** | **【使用シーン、効果等】** |

---

## 6. 付録

### 6.1. 参考資料
- **【参考にした資料、URL、書籍等のリスト】**

### 6.2. 変更履歴

| バージョン | 日付 | 変更内容 | 変更者 |
| :--- | :--- | :--- | :--- |
| **1.0** | **【日付】** | **【初版作成】** | **【作成者名】** |
| **1.1** | **【日付】** | **【変更内容の概要】** | **【変更者名】** |

---

## ✅ 開発前チェックリスト（個人・AI協働開発向け）

### フェーズ1完了チェック
- [ ] プロジェクトの目的が明確になった
- [ ] ターゲットユーザーが明確になった  
- [ ] 技術環境と制約が決まった

### フェーズ2完了チェック
- [ ] 機能一覧と優先度が決まった
- [ ] ユーザーストーリーが整理できた
- [ ] 成功指標が決まった

### 開発開始可能チェック
- [ ] Must機能の仕様が決まった
- [ ] データ設計の方針が決まった
- [ ] AIと開発方針の認識が合った

### セキュリティチェック
- [ ] 脆弱性スキャンを実施した
- [ ] 認証・認可設計をレビューした
- [ ] 個人情報の取り扱いを確認した
- [ ] API セキュリティ対策を検討した
- [ ] データ暗号化要件を確認した

### 品質保証チェック
- [ ] テスト戦略を策定した
- [ ] 自動テストの範囲を決めた
- [ ] コードレビュー体制を整備した
- [ ] 品質ゲートを設定した

### 運用準備チェック
- [ ] 監視・ログ設定を完了した
- [ ] バックアップ・復旧手順を確認した
- [ ] 運用マニュアルを整備した
- [ ] 障害時の連絡体制を確立した
- [ ] 環境構築の自動化を完了した

### リリース準備チェック
- [ ] 本番環境への移行計画を策定した
- [ ] ユーザー教育・サポート体制を準備した
- [ ] ロールバック手順を確認した
- [ ] 性能テストを完了した

---

*最終更新日：【日付】*
*作成者：【氏名】*
