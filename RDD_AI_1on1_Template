# 【〇〇プロジェクト】AI協働開発 要件定義書

## 🤖 AI協働開発専用テンプレートについて
このテンプレートは「**あなた + AI**」でのプロジェクト開発に最適化されています。
従来の要件定義書から不要な項目を削除し、AIとの効率的な協働に必要な要素だけを厳選しました。

### ✨ このテンプレートの特徴
- **段階的記入**: 完璧を求めず、必要な部分から順番に埋める
- **AI相談欄**: 各セクションにAIに相談すべきポイントを明記
- **対話重視**: 文書完成よりもAIとの対話を通じた仕様固めを重視
- **実装直結**: 開発に直接役立つ情報に特化

### 🏃‍♂️ 3段階の進め方
**Step 1 - 方向性決め（10分）**: プロジェクトの「なぜ」「誰に」「何を」をAIと確認
**Step 2 - スコープ決め（30分）**: 機能範囲と優先度をAIと相談しながら決定
**Step 3 - 実装詳細（開発中）**: 必要になったタイミングでAIと仕様を詰める

---

## 🎯 Step 1: 方向性決め（AIとの初回打ち合わせ）

### 1. プロジェクトの「なぜ」
**🤖 AIに相談：「この動機で開発する価値はある？他にも解決方法はない？」**

#### 作りたい理由
**【なぜこれを作ろうと思ったのか、素直に書く】**

#### 現在困っていること
**【今どんな課題があるのか、できるだけ具体的に】**
- 

#### 理想の状態
**【このシステムがあったらどうなっていたいか】**
- 

### 2. プロジェクトの「誰に」
**🤖 AIに相談：「このユーザー像で機能設計して大丈夫？想定漏れはない？」**

#### メインユーザー
- **どんな人？**: 【年齢、職業、ITスキルレベル等】
- **どんな状況で使う？**: 【時間、場所、デバイス、心理状態等】
- **何に困ってる？**: 【このユーザーの具体的な課題】
- **何を期待してる？**: 【システムに求める価値】

#### 利用シーン（3つまで）
1. 【シーン1】: 【いつ、どこで、なぜ使うか】
2. 【シーン2】: 
3. 【シーン3】: 

### 3. プロジェクトの「何を」
**🤖 AIに相談：「技術選択は適切？もっと良い選択肢はない？」**

#### 作るもの
**【一言で言うと何を作るのか】**

#### 技術スタック
- **フロントエンド**: 【React/Vue/Next.js/バニラJS等】
- **バックエンド**: 【Node.js/Python/PHP/サーバーレス等】
- **データベース**: 【MySQL/Firebase/Supabase等】
- **ホスティング**: 【Vercel/Netlify/AWS等】

#### 制約・前提条件
- **予算制約**: 【月額○○円以内等】
- **技術制約**: 【使えない技術、学習コスト等】
- **時間制約**: 【いつまでに作りたいか】

### 4. セキュリティ・プライバシー要件
**🤖 AIに相談：「個人情報の扱い、認証方式、データ保護は適切？」**

#### 取り扱うデータの分類
- **個人情報**: 【氏名、メール、電話番号等の有無】
- **機密情報**: 【パスワード、決済情報等の有無】
- **ログデータ**: 【アクセスログ、操作ログ等】

#### 認証・セキュリティ方式
- **ログイン方法**: 【メール/パスワード、SNS認証、匿名等】
- **セッション管理**: 【有効期限、自動ログアウト等】
- **データ暗号化**: 【通信時、保存時の暗号化】

#### データ保護方針
- **アクセス制御**: 【誰がどのデータにアクセスできるか】
- **データ保存期間**: 【どのくらい保存するか】
- **削除・匿名化**: 【データ削除の仕組み】

**✅ Step 1 完了チェック**
- [ ] プロジェクトの目的をAIと確認した
- [ ] ユーザー像をAIと議論した
- [ ] 技術選択をAIに相談した
- [ ] セキュリティ・プライバシー要件をAIと確認した
- [ ] AIから「方向性に問題ない」と確認もらった

---

## 🎯 Step 2: スコープ決め（AIとの機能設計セッション）

### 4. 機能の洗い出しと優先順位
**🤖 AIに相談：「この機能分けで抜け漏れない？優先順位は適切？」**

#### 4.1. 機能一覧（AIと一緒にブレスト）
**必要だと思う機能を思いつくまま列挙 → AIに整理・分類してもらう**

【自由記述エリア - まずは思いつくまま書く】


#### 4.2. 優先度付け（AIと相談して決定）
| 機能名 | 優先度 | 理由 | 工数見積もり（AI相談） |
| :--- | :--- | :--- | :--- |
| **【機能名】** | **Must/Should/Could** | **【なぜこの優先度？】** | **【大/中/小】** |
|  |  |  |  |

**優先度の定義**
- **Must**: リリースに絶対必要（これがないと価値を提供できない）
- **Should**: 重要だが後から追加でも良い
- **Could**: あると嬉しいが影響は少ない

### 5. MVP（最小限の価値あるプロダクト）の定義
**🤖 AIに相談：「このMVPで本当にユーザーに価値提供できる？」**

#### 5.1. MVPに含める機能（Must機能のみ）
1. 【機能1】: 【なぜMVPに必要？】
2. 【機能2】: 【なぜMVPに必要？】
3. 【機能3】: 【なぜMVPに必要？】

#### 5.2. 成功の定義
- **定量的目標**: 【具体的な数値目標】
- **定性的目標**: 【ユーザーにどんな体験を提供したいか】

#### 5.3. リリース後の改善計画
**フェーズ2で追加予定の機能**
- 【Should機能1】
- 【Should機能2】

**✅ Step 2 完了チェック**
- [ ] 必要な機能を洗い出せた
- [ ] AIと優先度を相談して決めた
- [ ] MVPの範囲が明確になった
- [ ] 開発の工数感をAIと確認した

---

## 🎯 Step 3: 実装詳細（開発中にAIと段階的に詰める）

### 6. 機能仕様の詳細化（必要になった機能から順番に）
**💡 コツ: 全機能を最初に詳細化しようとせず、実装する直前にAIと相談**

---
#### 【機能名: ○○機能】の仕様
**🤖 AIに相談：「この仕様で実装可能？抜け漏れやリスクはない？」**

**機能概要**
【この機能が何をするものか、一行で説明】

**ユーザーの操作フロー**
1. 【ユーザーが最初にすること】
2. 【次にすること】  
3. 【最終的にどうなるか】

**画面・UI の要件**
- **必要な入力項目**: 【テキスト、選択肢、ファイル等】
- **表示する情報**: 【結果、状態、メッセージ等】
- **ボタン・操作**: 【保存、削除、編集等】

**技術的な処理内容（AIと相談して決める）**
- **入力チェック**: 【バリデーション内容】
- **データ処理**: 【保存、計算、変換等】
- **外部連携**: 【API呼び出し、ファイル処理等】

**例外処理・エラーハンドリング**
- **入力エラー時**: 【どう表示するか】
- **システムエラー時**: 【どう対応するか】
- **通信エラー時**: 【どうフォローするか】

**受け入れ条件（AIに相談して作成）**
- [ ] 正常系：【通常の操作で期待通り動作する】
- [ ] 異常系：【エラー時も適切にハンドリングされる】
- [ ] 性能：【許容できる処理時間で動作する】

**実装時の注意点（AIからのアドバイス）**
【AIに相談した結果の技術的なアドバイスをメモ】

---
*(上記のテンプレートを必要な機能分コピーして使用)*

### 7. データ設計（AIと相談しながら決める）
**🤖 AIに相談：「このデータ構造で効率的？将来の拡張性は大丈夫？」**

#### 7.1. 保存が必要なデータ
**【データの種類】**: 【何のために保存するか】
- 

#### 7.2. データベース設計（AIと一緒に設計）
**テーブル: 【テーブル名】**
| カラム名 | データ型 | 必須 | 備考 |
| :--- | :--- | :--- | :--- |
| id | UUID | ✅ | 主キー |
|  |  |  |  |

**AIとの相談ポイント**
- [ ] データの正規化は適切？
- [ ] インデックスは必要？
- [ ] 将来の機能拡張に対応できる？

### 8. 環境設定・運用要件
**🤖 AIに相談：「環境設定やデプロイ方法で効率的な方法はある？」**

#### 8.1. 開発環境
- **ローカル環境**: 【PC/Mac、エディタ、開発サーバー等】
- **開発用DB**: 【ローカルDB、テストデータ等】
- **開発ツール**: 【Git、パッケージマネージャー等】

#### 8.2. 本番環境
- **デプロイ先**: 【Vercel、Netlify、AWS等】
- **データベース**: 【本番用DB、バックアップ設定】
- **ドメイン・SSL**: 【独自ドメイン、証明書設定】

#### 8.3. 環境変数・設定管理
- **機密情報管理**: 【APIキー、パスワード等の管理方法】
- **環境別設定**: 【開発/本番での設定差分】
- **設定ファイル**: 【どこで何を管理するか】

#### 8.4. 性能要件（具体的指標）
**🤖 AIに相談：「この性能目標は現実的？改善方法はある？」**
- **レスポンス時間**: 【画面表示：○秒以内、API：○ms以内】
- **同時利用者数**: 【想定ユーザー数、ピーク時負荷】
- **データ処理能力**: 【1秒あたり処理件数】
- **ストレージ容量**: 【初期容量、拡張計画】

### 9. エラー処理・監視設計
**🤖 AIに相談：「エラー処理やログ設計で重要なポイントは？」**

#### 9.1. エラー処理方針
- **エラーレベル分類**: 
  - **Fatal**: システム停止レベル
  - **Error**: 機能単位での異常
  - **Warning**: 注意が必要な状況  
  - **Info**: 情報記録用

#### 9.2. ログ出力設計
- **記録対象**: 【ユーザー操作、システム処理、エラー等】
- **ログ形式**: 【JSON、プレーンテキスト等】
- **保存期間**: 【ログの保管期間】

#### 9.3. 監視・通知
- **監視項目**: 【システム稼働、エラー発生等】
- **通知方法**: 【メール、Slack、SMS等】
- **障害時対応**: 【復旧手順、エスカレーション】

### 10. バックアップ・復旧計画
**🤖 AIに相談：「データ保護やバックアップ戦略で注意点は？」**

#### 10.1. データバックアップ
- **バックアップ対象**: 【データベース、ファイル、設定等】
- **バックアップ頻度**: 【日次、週次等】
- **保存先**: 【クラウドストレージ、外部サービス等】

#### 10.2. 復旧手順
- **復旧目標時間（RTO）**: 【○時間以内】
- **復旧可能時点（RPO）**: 【○時間前まで】
- **復旧手順**: 【手動/自動復旧の方法】

#### 10.3. 事業継続性
- **代替手段**: 【システム停止時の対応方法】
- **ユーザー連絡**: 【障害時の連絡方法】

**✅ Step 3 進行チェック**
- [ ] 実装予定の機能の仕様をAIと確認した
- [ ] データ設計をAIと相談した
- [ ] 環境設定をAIと検討した
- [ ] エラー処理・監視設計をAIと確認した
- [ ] バックアップ・復旧計画をAIと検討した

### 11. 外部サービス・API連携
**🤖 AIに相談：「このサービス選択で問題ない？代替案は？」**

#### 使用予定のサービス
| サービス名 | 用途 | 料金 | 代替案 |
| :--- | :--- | :--- | :--- |
| **【サービス名】** | **【何に使うか】** | **【無料枠/料金】** | **【使えない場合の代替】** |
|  |  |  |  |

### 12. 技術的負債の管理
**🤖 AIに相談：「将来のメンテナンス性は大丈夫？技術的負債を防ぐには？」**

#### 12.1. コード品質管理
- **コーディング規約**: 【使用する規約、linter設定】
- **リファクタリング計画**: 【定期的な改善計画】
- **コードレビュー**: 【AIによるコードチェック方針】

#### 12.2. ドキュメント管理
- **技術文書**: 【README、API仕様書等】
- **更新方針**: 【どのタイミングで更新するか】
- **ナレッジ管理**: 【学んだことの記録方法】

#### 12.3. 依存関係管理
- **ライブラリ管理**: 【パッケージマネージャー、バージョン管理】
- **更新戦略**: 【セキュリティ更新、機能更新の方針】
- **非推奨対応**: 【廃止予定機能の移行計画】

### 13. テスト戦略
**🤖 AIに相談：「効率的なテスト方法や自動化すべき範囲は？」**

#### 13.1. テスト種別と範囲
- **単体テスト**: 【関数・コンポーネント単位】
- **結合テスト**: 【機能間連携、外部API連携】
- **E2Eテスト**: 【ユーザー操作フロー全体】
- **手動テスト**: 【UIの見た目、ユーザビリティ】

#### 13.2. 自動化方針
- **自動化対象**: 【どのテストを自動化するか】
- **テストツール**: 【Jest、Playwright、Cypress等】
- **実行タイミング**: 【コミット時、デプロイ前等】

#### 13.3. テストデータ管理
- **テストデータ作成**: 【ダミーデータ、匿名化データ】
- **データリセット**: 【テスト実行時のデータ初期化】
- **機密データ**: 【本番データの取り扱い】

---

## 🧠 AIとの対話・相談履歴

### 相談ログ（日付順で記録）
**【日付】のAI相談セッション**
- **相談内容**: 【何について相談したか】
- **AIの提案・アドバイス**: 【AIからもらった提案】
- **決定事項**: 【最終的に何を決めたか】
- **次回持ち越し**: 【次回話したいこと】

---

### 🎯 現在のAIへの質問・相談リスト
**技術的な相談**
- [ ] 【相談したい技術的な課題】
- [ ] 【セキュリティ・性能について】

**機能・仕様の相談**  
- [ ] 【機能の詳細について】
- [ ] 【ユーザビリティについて】

**実装の相談**
- [ ] 【コードの書き方・構造について】
- [ ] 【ライブラリ・ツール選択について】

### 🚀 次回のAIセッションでやりたいこと
**優先度順**
1. 【最優先で相談したいこと】
2. 【次に相談したいこと】  
3. 【時間があれば相談したいこと】

### 🔧 AIからの技術的アドバイス・知見
**学んだベストプラクティス**
- 【AIから教わった効率的な方法】
- 【避けるべき実装パターン】

**推奨ツール・ライブラリ**
- 【AIが推奨してくれたツール】: 【使用理由】
- 【代替案として提案されたもの】: 【メリット・デメリット】

---

## 📊 プロジェクト進捗管理

### 現在のステータス
- **全体進捗**: 【○○%】
- **現在のフェーズ**: 【Step 1/2/3】
- **今週の目標**: 【今週達成したいこと】

### 完了した項目
- [x] 【完了した作業】
- [x] 【完了した作業】

### 今後の予定
- [ ] 【次にやる予定の作業】
- [ ] 【その後の作業】

### 課題・懸念事項
**技術的課題**
- 【解決が必要な技術的な問題】

**スケジュール的課題**  
- 【時間的な懸念事項】

---

## 📚 参考資料・リンク

### 技術関連
- **公式ドキュメント**: 【URL】
- **参考記事**: 【URL】
- **GitHub リポジトリ**: 【URL】

### デザイン・UI参考
- **デザイン参考サイト**: 【URL】
- **UIライブラリ**: 【URL】

### 競合・類似サービス調査
- **競合サービス1**: 【URL】 - 【参考になるポイント】
- **競合サービス2**: 【URL】 - 【参考になるポイント】

---

## 🎉 プロジェクト完了時の振り返り

### うまくいったこと
**AIとの協働で良かった点**
- 

**技術選択で良かった点**
- 

### 改善できそうなこと  
**次回はこうしたい**
- 

### 学んだこと・得られた知識
**技術的な学び**
- 

**プロジェクト管理の学び**
- 

---

**📝 更新履歴**
- **v1.0** (【日付】): プロジェクト開始・Step1完了
- **v1.1** (【日付】): 【更新内容】

---

## ✅ 最終チェックリスト

### 🎯 Step 1完了チェック  
- [ ] プロジェクトの目的が明確
- [ ] ユーザー像が明確
- [ ] 技術スタックが決定
- [ ] セキュリティ・プライバシー要件を確認
- [ ] AIと方向性の認識が一致

### 🎯 Step 2完了チェック
- [ ] 機能一覧が整理された
- [ ] 優先度が明確
- [ ] MVPの範囲が決定
- [ ] 開発計画がAIと合意

### 🎯 Step 3完了チェック  
- [ ] Must機能の仕様が決定
- [ ] データ設計が完了
- [ ] 環境設定方針が決定
- [ ] エラー処理・監視設計が完了
- [ ] テスト戦略が決定
- [ ] 実装準備が整った

### 🔒 セキュリティチェック
- [ ] 脆弱性対策をAIと確認した
- [ ] 認証・認可設計をレビューした
- [ ] 個人情報の取り扱いを確認した
- [ ] データ暗号化方針を決定した

### 🛠 運用準備チェック
- [ ] 監視・ログ設定を計画した
- [ ] バックアップ・復旧手順を確認した
- [ ] エラー処理方針を決定した
- [ ] 技術的負債管理方針を決定した

### 🚀 リリース準備チェック
- [ ] 全てのMust機能が実装済み
- [ ] テストが完了
- [ ] 本番環境の準備が完了
- [ ] 監視・ログ設定が完了
- [ ] バックアップ設定が完了
- [ ] ユーザー向け説明が準備済み

### 📚 用語集

#### 技術用語
| 用語 | 定義・説明 |
| :--- | :--- |
| **【フレームワーク名】** | **【このプロジェクトでの使用目的・概要】** |
| **【アーキテクチャパターン】** | **【採用理由・メリット】** |
|  |  |

#### ビジネス・ドメイン用語
| 用語 | 定義・説明 |
| :--- | :--- |
| **【業界特有の用語】** | **【プロジェクト内での定義】** |
| **【システム固有の用語】** | **【ユーザーや機能に関する定義】** |
|  |  |

#### AI・開発用語
| 用語 | 定義・説明 |
| :--- | :--- |
| **【AI協働で使う用語】** | **【プロジェクトでの意味・使い方】** |
| **【プロンプトエンジニアリング】** | **【AIとの効果的な対話方法】** |
|  |  |
